<pipelines>

  <pipeline name="gf/default_deferred_pipeline">
    <input-layout>
      <element semantic="POSITION" format="float3"></element>
    </input-layout>

    <shaders>
      <vertex-shader file="post_process.hlsl" main="vs_main"/>
      <pixel-shader  file="deferred_shading.hlsl" main="default_ps_main">
        <variable name="gGBuffer0" value="texture" index="0"/>
        <variable name="gGBuffer1" value="texture" index="1"/>
        <variable name="gGBuffer2" value="texture" index="2"/>
        <variable name="gGBuffer3" value="texture" index="3"/>
        <variable name="gDepthBuffer" value="texture" index="4"/>
      </pixel-shader>
    </shaders>

    <render-states>
      <render-state name="depth_enable" value="false"/>
    </render-states>

    <samplers>
      <sampler name="gSamplerState" addressU="clamp" addressV="clamp" filter="MIN_MAG_MIP_POINT"/>
    </samplers>
  </pipeline>


  <pipeline name="gf/default_cs_tile_based_ds_post_process">
    <input-layout>
      <element semantic="POSITION" format="float3"></element>
    </input-layout>

    <shaders>
      <vertex-shader file="post_process.hlsl" main="vs_main"/>
      <pixel-shader  file="tile_based_deferred_shading.hlsl" main="ps_main">
      </pixel-shader>
    </shaders>

    <render-states>
      <render-state name="depth_enable" value="false"/>
    </render-states>

    <samplers>
      <sampler name="gSamplerState" addressU="clamp" addressV="clamp" filter="MIN_MAG_MIP_POINT"/>
    </samplers>
  </pipeline>

  <!-- This pipeline is for anti-aliasing when using deferred shading. -->
  <pipeline name="gf/deferred_anti_aliasing_post_process">
    <input-layout>
      <element semantic="POSITION" format="float3"></element>
    </input-layout>

    <shaders>
      <vertex-shader file="post_process.hlsl" main="vs_main"/>
      <pixel-shader  file="anti_aliasing.hlsl" main="ps_main">
        <variable name="gPixelsBuffer" value="texture" index="0"/>
        <variable name="gDepthBuffer" value="texture" index="1"/>
        <variable name="gNormalBuffer" value="texture" index="2"/>
      </pixel-shader>
    </shaders>

    <render-states>
      <render-state name="depth_enable" value="false"/>
    </render-states>

    <samplers>
      <sampler name="gPointSamplerState" addressU="clamp" addressV="clamp" filter="MIN_MAG_MIP_POINT"/>
      <sampler name="gLinearSamplerState" addressU="clamp" addressV="clamp" filter="MIN_MAG_LINEAR_MIP_POINT"/>
    </samplers>
  </pipeline>
  
</pipelines>


